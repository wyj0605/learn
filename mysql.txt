1.启动与关闭MySQL
/etc/init.d/mysqld stop
/etc/init.d/mysqld start 

netstat -lnt | grep 3306

killall mysql
killall -9 mysql不推荐使用些方法

mysqld:no process killed 出现些提示时表示杀死了全部进程


1.2.多实例方法

启动
/data/3306/mysql start
/data/3307/mysql start

关闭同理

/data/3306/mysql stop

用脚本来操作。自己写脚本。

1.3登陆MYSQL方法
单实例方法

mysql < 刚装完系统无密码情况登陆方式

mysql -uroot <刚装完系统无密码情况登陆方式

mysql -uroot -p < 这里标准的dba命令行登陆命令

mysql -uroot -p'admin' <非脚本里一般不这样用，密码明文会泄露密码

1.3.1

多实例方法

mysql -uroot -p -S /data/3306/mysql.sock
mysql -uroot -p -S /data/3307/mysql.sock


1.4

登陆后显示信息
msyql -uroot -p

Commands and with ; or \g 《MYSQL命令以分号或\g结束

善用help

help show  会提示show命令


授权用户权限

GRANT ALL ON mydb.* TO 'someuser'@'somehost';
GRANT SELECT, INSERT ON mydb.* TO 'someuser'@'somehost';


退出MySQL方法

quit 或 exit


1.5设置及修改mysql root用户密码


设置密码方法

mysqladmin -u root password 'wyj'  设置密
mysqladmin -u root -p'wyj' password wyj' -S /data/3306/mysql.sock 多实例


修改root密码方法一
mysqladmin -u root -p'wyj' password 'password'

mysqladmin -u root -p'wyj' password 'password' -S /data/3306/mysql.sock 多实例



修改root密码方法二

update mysql.user set password=password("password") where user='root'

flush privileges
此方法适合--skip-grant-tables 方式修改密码

修改root密码法三

set password=password('password');

找回丢失mysql root用户密码

killall mysqld
mysqld_safe --skip-grant-tables &
mysql -u root -p 《登录时空密码

重启用新密码登陆
killall -9 mysqld
/etc/init.d/mysqld restart

2 操作数据库
2.1创建数据库
create database name;

mysql> show create database odl;
+----------+----------------------------------------------------------------+
| Database | Create Database                                                |
+----------+----------------------------------------------------------------+
| odl      | CREATE DATABASE `odl` /*!40100 DEFAULT CHARACTER SET latin1 */ | 

CREATE DATABASE `odl` DEFAULT CHARACTER SET latin1

CREATE DATABASE `odl`  DEFAULT CHARACTER SET gbk   字符集

字符集知识

MYSQL字符集包括字符集(CHARACTER) 和校对规则（COLLATION）两个概念。CHARACTER SET用来在存储的方式。COLLATION gbk_chinese_ci为校对规则。


\c  清除屏幕显示 

显示数据库

show database name

删除数据库

drop database name


2.2连接数据库

use 数据库

select database() 显示当前所在的数据库

show tables; 查看数据库下边的表

select user();查看当前用户

system whoami 跳出mysql下运行的命令


2.3

删除系统多余的帐号
drop user "user"@"主机域"
也可用
delete from msyql.user where user='root' and  host ='old';
flush privileges;

2.4创建用户
create user old@localhost identified by '234';

grant all privileges on *.* to old@localhost; 授权所有权限


收回权限
REVOKE insert on *.* from 'old'@'localhsot';


2.4生产环境授权用户的建设


1.博客，CMS等产品的数据库授权：

create database blog default character set gbk coolate gbk_chinese_ci;

grant seelct,insert,update,delete,create on blog.* to 'blog'@'localhost%' identified by 'oldby';

生产环境收回create 授权：
revoke create on blog.* from'blog'@'10.0.0%';


2)生产环境主库用户的授权
grant select,insert,update,delete on 'blog'.* to 'blog'@'10.0.0%' identified by 'old24';

3)生产环境从库用户的授权
grant select on 'blog'.* to 'blog'@'10.0.0.' identified by 'oldbo23';

写库
blog od23 3306 10.0.0.7


读库
blog od23 3306 10.0.0.8   分别给不同的权限


3表操作
3.1准备工作
创建数据库
create database oldboy default character set gbk collate gbk_chinese_ci;
show databases;

创建表
create table test(
id int(4) not null primary key auto_increment,
name char(20) not null
);


插入数据
insert into <表名> [(<字段名1>，)]

insert into test values(1,'wang');不指定字段时间就是按顺序插入数据

insert into test (id,name) values (4,'jin'); 

insert into test (name) values ('jin'); ID自增，只插入名字


数据库的备份
mysqldump -B 'oldboy' > oldboy.sql


查找数据库
提示：字符类型要带引号

查看表结构
desc tablename

查看建表语句
show create table from test\G

更新语句
update test set name='xiaojing' where name='xiaojing'; 注意必须加条件，否则全部更新。

恢复文件
mysql < wyj.sql

删除表中数据
delete from test where id > 3;注意必须加条件，否则全部删除。

清空表数据
truncate tablename 

表中增删字段

alter table test add sex char(4) after name; 添加sex字段在name后。

alter table test drop sex;删除字段

更改表名
rename table 原表名 to 新表名
rename table test to qq;

删除表
drop table name;注意做一切删除修改工作一定要先备份。

==========================================================================================
4.MYSQL数据库的备份与恢复
1.准备工作：首先建立表

show tables;

不用进入mysql直接在外边操作数据库，多个命令可以用;号分开。
mysql -e "select * from oldboy.test";

表中插入中文字符时出现乱码解决方法
set names gbk;不能正常显示  set names utf8;通常使用UTF8，正常。
也可以在my.cnf里边设置
[mysqld]
default-character-set=gbk  默认的字符集

insert into test(name) values ('小');

mysql> show variables like '%character%';显示字符集
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       | 
| character_set_connection | utf8                       | 
| character_set_database   | gbk                        | 
| character_set_filesystem | binary                     | 
| character_set_results    | utf8                       | 
| character_set_server     | latin1                     | 
| character_set_system     | utf8                       | 
| character_sets_dir       | /usr/share/mysql/charsets/ | 
+--------------------------+----------------------------+

utf8与gbk，utf8属于不定长字符集，支持的语言多。如只支持中文可以使用GBK，因为GBK属于定长字节，大量运算，比较排序等定长字符集更愉快，性能高。

******************
看mysql手册重点在
数据库的管理
mysql中的复制
优化
客户端和实用工具程序
字符集列类型
SQL语句语法
插件式在存储引擎体系结构
存储引擎和表类型
********************

===========================================================================================
LAMP系列之MYSQL基础命令操作实战讲解  多实例安装配置
1.什么是MYSQL多实列
就是开启不同的服务端口，运行多个MYSQL的进程。不同的SOCKET监听不同的服务端口来提供各自的服务。
2.MYSQL多实例的特点
单个服务器资源有剩余时，可以充分利用剩余的资源提供更多的服务
节约服务器的资源，有可能会发生资源抢占问题，
应用的场景，资金紧张型公司。
例如：可以在3台服务器部署6-9个实例，交叉做主从同步备份及读写分离，实现6-9台服务器才有的效果。



3.多实列的常见的配置方法
通过配置多个配置文件及多个启动程序，来实现多个实例。
 
3.1 创建MYSQL多个实列的数据目录
mkdir -p /data/{3306,3307}/data 
tree /data
[root@localhost ~]# tree /data
/data
|-- 3306
|   `-- data
`-- 3307
    `-- data

3.2 杀死mysql进程，出现no process killed表示全部已杀死。

[root@localhost ~]# killall mysqld   
mysqld: no process killed

3.3删除自启动
[root@localhost ~]# chkconfig mysqld off
[root@localhost ~]# chkconfig --list mysqld
mysqld          0:关闭  1:关闭  2:关闭  3:关闭  4:关闭  5:关闭  6:关闭

建议一般生产环境中2-3个实例。
vim 里批量替换
:%s/3306/3307/g


chown -R mysql:mysql /data

find /data -name mysql -exec chmod 700 {} \;  注意多多使用

[root@localhost 3306]# ls -ld /data
d-wx-wx-wx 4 mysql mysql 4096 02-26 07:41 /data

ls -l /data/{3306,3307}  检查配置文件

[root@localhost 3306]# ls -l /data/{3306,3307}
/data/3306:
总计 4
drwxr-xr-x 2 mysql mysql 4096 02-26 10:52 data

/data/3307:
总计 4
drwxr-xr-x 2 mysql mysql 4096 02-26 10:53 data

配置MYSQL命令的全局路径，
[root@localhost 3306]# echo "export PATH=$PATH:/usr/local/mysql/bin" >> /etc/etc/profile

[root@localhost 3306]# source /etc/profile
[root@localhost 3306]# echo $PATH
/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/mysql/bin:/usr/local/mysql/bin

初始化数据库
mysql_install_db --datadir=/data/3306/data
mysql_install_db --datadir=/data/3307/data
##############################*****************************************************************************
[root@localhost 3307]# mysql_install_db --datadir=/data/3307/data
Installing MySQL system tables...
140226 11:26:14 [Warning] option 'max_join_size': unsigned value 18446744073709551615 adjusted to 4294967295
140226 11:26:14 [Warning] option 'max_join_size': unsigned value 18446744073709551615 adjusted to 4294967295
OK
Filling help tables...
140226 11:26:14 [Warning] option 'max_join_size': unsigned value 18446744073709551615 adjusted to 4294967295
140226 11:26:14 [Warning] option 'max_join_size': unsigned value 18446744073709551615 adjusted to 4294967295
OK

To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system

PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands:
/usr/bin/mysqladmin -u root password 'new-password'
/usr/bin/mysqladmin -u root -h localhost.localdomain password 'new-password'

Alternatively you can run:
/usr/bin/mysql_secure_installation

which will also give you the option of removing the test
databases and anonymous user created by default.  This is
strongly recommended for production servers.

See the manual for more instructions.

You can start the MySQL daemon with:
cd /usr ; /usr/bin/mysqld_safe &

You can test the MySQL daemon with mysql-test-run.pl
cd mysql-test ; perl mysql-test-run.pl

Please report any problems with the /usr/bin/mysqlbug script!

The latest information about MySQL is available on the web at
http://www.mysql.com
Support MySQL by buying support/licenses at http://shop.mysql.com
*******************************************************************************************************
[root@localhost 3307]# cp /data/3306/my.cnf /data/3307/my.cnf

[root@localhost 3306]# /data/3306/mysql start
Starting MySQL...

[root@localhost 3306]# /data/3307/mysql start
Starting MySQL...
******************************************************************************************************
[root@localhost 3306]# /data/3306/mysql start
Starting MySQL...
[root@localhost 3306]# Warning: World-writable config file '/data/3306/my.cnf' is ignored
Warning: World-writable config file '/data/3306/my.cnf' is ignored

[root@localhost 3306]#
[root@localhost 3306]# netstat -ntl | grep 3306
tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN
[root@localhost 3306]# /data/3307/mysql start
Starting MySQL...
[root@localhost 3306]# Warning: World-writable config file '/data/3307/my.cnf' is ignored
Warning: World-writable config file '/data/3307/my.cnf' is ignored

******************************************************************************************************
====

实现开自启动
/etc/rc.local
echo "/data/3306/mysql start " >> /etc/rc.local
echo "/data/3307/mysql start " >> /etc/rc.local
cat /etc/rc.local

mysql -S /data/3306/mysql.sock

单一的配置文件详讲



